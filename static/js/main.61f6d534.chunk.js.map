{"version":3,"sources":["components/Navigation/index.js","App.js","serviceWorker.js","index.js"],"names":["props","menuItems","useRef","onSelectItem","e","document","getElementById","checked","current","style","height","className","role","type","id","onChange","target","for","href","onClick","ref","activated","App","useState","setActivated","useEffect","window","addEventListener","onScroll","removeEventListener","y","scrollY","Navigation","class","background","color","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.61f6d534.chunk.js","sourcesContent":["import React, { useRef } from 'react';\nimport './style.scss';\n\nexport default function(props) {\n\n    const menuItems = useRef();\n\n    const onMenu = (e) => {\n        const {checked} = e.target;\n\n        if(checked) {\n            // menuItems.current.style.opacity = 1;\n            menuItems.current.style.height = '220px';\n        }\n        else {\n            // menuItems.current.style.opacity = 0;\n            menuItems.current.style.height = '0px';\n        }\n    }\n\n    const onSelectItem = (e) => {\n        document.getElementById('menu').checked = false;\n            // menuItems.current.style.opacity = 0;\n            menuItems.current.style.height = '0px';\n    }\n\n    return (\n    <nav className='navbar' role='navigation'>\n        <div className='nav-content'>\n            <div className='nav-content-header'>\n                <ul className='header-list'>\n                    <li className='header-item'>\n                        {/* <label class='menu-label'>\n                            <i className=\"fas fa-bars menu-icon\"></i>\n                        </label> */}\n                        <input type='checkbox' id='menu' onChange={onMenu}/>\n                        <label for='menu' className='menu-icon'>\n                            <div className='menu'></div>\n                        </label>\n                    </li>\n                    <li className='header-item'>\n                        <a target='_self' href='#profile' className='outstandingboy' onClick={onSelectItem}>outstandingboy</a>\n                    </li>\n                    <li className='header-item'>\n                        <a target='_blank' href='https://www.github.com/outstanding1301' \n                        className=\"fab fa-github github\"></a>\n                    </li>\n                </ul>\n            </div>\n          <ul className='menu-list' ref={menuItems}>\n            <li className='menu-item'>\n                <a target='_self' className={props.activated === 0 ? 'highlight' : ''} href=\"#top\" onClick={onSelectItem}>outstandingboy</a>\n            </li>\n            <li className='menu-item'>\n                <a target='_self' className={props.activated === 1 ? 'highlight' : ''} href=\"#projects\" onClick={onSelectItem}>Projects</a>\n            </li>\n            <li className='menu-item'>\n                <a target='_self' className={props.activated === 2 ? 'highlight' : ''} href=\"#skills\" onClick={onSelectItem}>Skills</a>\n            </li>\n            <li className='menu-item'>\n                <a target='_self' className={props.activated === 3 ? 'highlight' : ''} href=\"#about\" onClick={onSelectItem}>About</a>\n            </li>\n            <li className='menu-item'>\n                <a target='_self' className={props.activated === 4 ? 'highlight' : ''} href=\"#contact\" onClick={onSelectItem}>Contact</a>\n            </li>\n          </ul>\n        </div>\n      </nav>\n    );\n}","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport Navigation from './components/Navigation';\n\nfunction App() {\n\n  const [activated, setActivated] = useState(0);\n\n  useEffect(() => {\n    window.addEventListener('scroll', onScroll);\n    return () => {\n      window.removeEventListener('scroll', onScroll);\n    }\n  })\n\n  const onScroll = (e) => {\n    const y = window.scrollY;\n    // console.log(y);\n    if(y < 684) {\n      setActivated(0);\n    }\n    else if (y < 1368) {\n      setActivated(1);\n    }\n    else if (y < 2052) {\n      setActivated(2);\n    }\n    else if (y < 2472) {\n      setActivated(3);\n    }\n    else {\n      setActivated(4);\n    }\n  }\n\n  return (\n    <div id='top' className='App'>\n      <Navigation activated={activated}/>\n      <div class='container'>\n        <div id='profile' className='margin'></div>\n        <div className='temp' style={{background: '#ffffff'}}>\n          <h1 style={{color: '#000000'}}>Profile</h1>\n        </div>\n        <div id='projects' className='margin'></div>\n        <div className='temp' style={{background: '#000000'}}>\n          <h1 style={{color: '#ffffff'}}>Projects</h1>\n        </div>\n        <div id='skills' className='margin'></div>\n        <div className='temp' style={{background: '#ffffff'}}>\n          <h1 style={{color: '#000000'}}>Skills</h1>\n        </div>\n        <div id='about' className='margin'></div>\n        <div className='temp' style={{background: '#000000'}}>\n          <h1 style={{color: '#ffffff'}}>About</h1>\n        </div>\n        <div id='contact' className='margin'></div>\n        <div className='temp' style={{background: '#ffffff'}}>\n          <h1 style={{color: '#000000'}}>Contact</h1>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}